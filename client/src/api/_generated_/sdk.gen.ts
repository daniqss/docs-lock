// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetUsersData, GetUsersResponse, GetUsersError, CreateUserData, CreateUserResponse, CreateUserError, DeleteUserData, DeleteUserResponse, DeleteUserError, GetUserData, GetUserResponse, GetUserError, GetSkillsData, GetSkillsResponse, GetSkillsError, CreateSkillData, CreateSkillResponse, CreateSkillError, DeleteSkillData, DeleteSkillResponse, DeleteSkillError, GetSkillData, GetSkillResponse, GetSkillError, GetSectionsData, GetSectionsResponse, GetSectionsError, CreateSectionData, CreateSectionResponse, CreateSectionError, DeleteSectionData, DeleteSectionResponse, DeleteSectionError, GetSectionData, GetSectionResponse, GetSectionError, GetNotesData, GetNotesResponse, GetNotesError, CreateNoteData, CreateNoteResponse, CreateNoteError, DeleteNoteData, DeleteNoteResponse, DeleteNoteError, GetNoteData, GetNoteResponse, GetNoteError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Retrieve a list of users
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        url: '/users/{userId}',
        ...options
    });
};

/**
 * Retrieve a user
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        url: '/users/{userId}',
        ...options
    });
};

/**
 * Retrieve a list of skills
 */
export const getSkills = <ThrowOnError extends boolean = false>(options?: Options<GetSkillsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSkillsResponse, GetSkillsError, ThrowOnError>({
        url: '/skills',
        ...options
    });
};

/**
 * Create a new Skill
 */
export const createSkill = <ThrowOnError extends boolean = false>(options: Options<CreateSkillData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSkillResponse, CreateSkillError, ThrowOnError>({
        url: '/skills',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a skill
 */
export const deleteSkill = <ThrowOnError extends boolean = false>(options: Options<DeleteSkillData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSkillResponse, DeleteSkillError, ThrowOnError>({
        url: '/skills/{skillId}',
        ...options
    });
};

/**
 * Retrive a Skill
 */
export const getSkill = <ThrowOnError extends boolean = false>(options: Options<GetSkillData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSkillResponse, GetSkillError, ThrowOnError>({
        url: '/skills/{skillId}',
        ...options
    });
};

/**
 * Retrieve a list of sections
 */
export const getSections = <ThrowOnError extends boolean = false>(options?: Options<GetSectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSectionsResponse, GetSectionsError, ThrowOnError>({
        url: '/sections',
        ...options
    });
};

/**
 * Create a new Section
 */
export const createSection = <ThrowOnError extends boolean = false>(options: Options<CreateSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSectionResponse, CreateSectionError, ThrowOnError>({
        url: '/sections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a section
 */
export const deleteSection = <ThrowOnError extends boolean = false>(options: Options<DeleteSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSectionResponse, DeleteSectionError, ThrowOnError>({
        url: '/sections/{sectionId}',
        ...options
    });
};

/**
 * Retrieve a Section
 */
export const getSection = <ThrowOnError extends boolean = false>(options: Options<GetSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSectionResponse, GetSectionError, ThrowOnError>({
        url: '/sections/{sectionId}',
        ...options
    });
};

/**
 * Retrieve a list of notes
 */
export const getNotes = <ThrowOnError extends boolean = false>(options?: Options<GetNotesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotesResponse, GetNotesError, ThrowOnError>({
        url: '/notes',
        ...options
    });
};

/**
 * Create a new Note
 */
export const createNote = <ThrowOnError extends boolean = false>(options: Options<CreateNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNoteResponse, CreateNoteError, ThrowOnError>({
        url: '/notes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a note
 */
export const deleteNote = <ThrowOnError extends boolean = false>(options: Options<DeleteNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNoteResponse, DeleteNoteError, ThrowOnError>({
        url: '/notes/{noteId}',
        ...options
    });
};

/**
 * Retrieve a Note
 */
export const getNote = <ThrowOnError extends boolean = false>(options: Options<GetNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteResponse, GetNoteError, ThrowOnError>({
        url: '/notes/{noteId}',
        ...options
    });
};